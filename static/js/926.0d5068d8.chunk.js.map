{"version":3,"file":"static/js/926.0d5068d8.chunk.js","mappings":"uOACaA,E,QAAQC,EAAAA,MAAH,qkB,mECoClB,MAzBA,WACE,IAAMC,GAAYC,EAAAA,EAAAA,IAAYC,EAAAA,IACxBC,GAAOF,EAAAA,EAAAA,IAAYG,EAAAA,IACnBC,GAAWC,EAAAA,EAAAA,MAMjB,OALAC,EAAAA,EAAAA,YAAU,WACQC,SAASC,eAAe,QAChCC,MAAQP,EAChBE,GAASM,EAAAA,EAAAA,MACV,GAAE,CAACN,EAAUF,KAEZ,gCACGH,IAAa,SAACY,EAAA,EAAD,KACd,SAACd,EAAD,CACEe,GAAG,OACHC,YAAY,oBACZC,KAAK,OACLZ,KAAK,OACLa,UAAUC,EAAAA,EAAAA,WAAS,SAAAC,GACjBb,GAASc,EAAAA,EAAAA,IAAkB,CAAEhB,KAAMe,EAAME,OAAOV,SAChDL,GAASgB,EAAAA,EAAAA,IAAeH,EAAME,OAAOV,OACtC,GAAE,SAIV,C,4GC9BYY,GAAwBC,E,QAAAA,IACnC,CAL2B,SAAAC,GAAK,OAAIA,EAAMC,eAAeC,UAAzB,EAET,SAAAF,GAAK,OAAIA,EAAMC,eAAef,KAAzB,IAK5B,SAACgB,EAAYC,GACX,OAA0B,KAAb,OAANA,QAAM,IAANA,OAAA,EAAAA,EAAQC,QAAeD,EAASD,CACxC,IAEUxB,EAAe,SAAAsB,GAAK,OAAIA,EAAMC,eAAezB,SAAzB,EAGpBI,EAAU,SAAAoB,GAAK,OAAIA,EAAMC,eAAetB,IAAzB,C","sources":["components/FilteredCharacters/Filter.styled.js","components/FilteredCharacters/FilteredCharacters.jsx","redux/selectors.js"],"sourcesContent":["import styled from '@emotion/styled';\nexport const Input = styled.input`\n  width: 100%;\n  display: block;\n  border: 1px solid rgba(0, 0, 0, 0.5);\n  border-radius: 8px;\n  box-shadow: 0 0 10px lightgrey;\n  height: 56px;\n  margin-top: 16px;\n  outline: grey solid 1px;\n  padding-left: 50px;\n  background-size: 18px;\n  background-repeat: no-repeat;\n  background-position: 16px center;\n  opacity: 0.6;\n  background-image: url('https://uxwing.com/wp-content/themes/uxwing/download/user-interface/search-line-icon.svg');\n  &::placeholder {\n    font-size: 16px;\n    line-height: 150%;\n    color: rgba(0, 0, 0, 0.5);\n  }\n`;\n","import { Input } from './Filter.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getIsloading, getName } from 'redux/selectors';\nimport { useEffect } from 'react';\nimport { Loader } from 'components/Loader/Loader';\nimport {\n  getCharacters,\n  getfilteredByName,\n  getNameByValue,\n} from 'redux/operations';\nimport { debounce } from 'lodash';\n\nfunction FilteredCharacter() {\n  const isLoading = useSelector(getIsloading);\n  const name = useSelector(getName);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    const inputEl = document.getElementById('name');\n    inputEl.value = name;\n    dispatch(getCharacters());\n  }, [dispatch, name]);\n  return (\n    <>\n      {isLoading && <Loader />}\n      <Input\n        id=\"name\"\n        placeholder=\"Filter by name...\"\n        type=\"text\"\n        name=\"name\"\n        onChange={debounce(event => {\n          dispatch(getfilteredByName({ name: event.target.value }));\n          dispatch(getNameByValue(event.target.value));\n        }, 300)}\n      />\n    </>\n  );\n}\nexport default FilteredCharacter;\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const getCharacters = state => state.charactersData.characters;\n\nexport const getFilter = state => state.charactersData.value;\n\nexport const getFilteredCharacters = createSelector(\n  [getCharacters, getFilter],\n\n  (characters, filter) => {\n    return filter?.length !== 0 ? filter : characters;\n  }\n);\nexport const getIsloading = state => state.charactersData.isLoading;\nexport const getPages = state => state.charactersData.pages;\nexport const getPage = state => state.charactersData.page;\nexport const getName = state => state.charactersData.name;\n"],"names":["Input","styled","isLoading","useSelector","getIsloading","name","getName","dispatch","useDispatch","useEffect","document","getElementById","value","getCharacters","Loader","id","placeholder","type","onChange","debounce","event","getfilteredByName","target","getNameByValue","getFilteredCharacters","createSelector","state","charactersData","characters","filter","length"],"sourceRoot":""}